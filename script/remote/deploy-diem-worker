#!/bin/bash

set -e
echo "${MINION_SIMD_ID}" | grep -Pq '^\d+$'
test -d "${MINION_SIMD_DIR}/${MINION_SIMD_ID}"

SERVER_PORT=7000
CLIENT_PORT=9000
ACCOUNTS=130

script_name='deploy-diem-worker'
install_root="${HOME}/install/diem"
deploy_root="${HOME}/deploy/diem"
prepare_root="${HOME}/prepare/diem"
behaviors_path="${MINION_SIMD_DIR}/${MINION_SIMD_ID}/behaviors.txt"


is_leader() {
    test ${MINION_SIMD_ID} -eq 0
}

setup_environment() {
    test -e "${install_root}"

    export PATH="${install_root}/target/release:${PATH}"

    command -v 'diem-swarm' > '/dev/null'
    command -v 'diem-node' > '/dev/null'
}

list_blockchain_nodes() {
    local line ip count

    while read line ; do
	ip="$(echo "${line}" | cut -d':' -f1)"
	count="$(echo "${line}" | cut -d':' -f2)"

	while [ ${count} -gt 0 ] ; do
	    echo "${ip}"
	    count=$(( count - 1 ))
	done
    done < "${behaviors_path}"
}

list_blockchain_nodes_with_offset() {
    local node offset
    local offsets="$(mktemp -d --suffix='.d' 'diem-nodes-offset.XXXXXX')"

    list_blockchain_nodes | while read node ; do
	if [ -e "${offsets}/${node}" ] ; then
	    offset="$(cat "${offsets}/${node}")"
	else
	    offset=0
	fi

	echo "${node}:${offset}"

	echo $(( offset + 1 )) > "${offsets}/${node}"
    done

    rm -rf "${offsets}"
}

id_to_blockchain_node() {
    local id="$1" ; shift

    head -n$(( id + 1 )) "${behaviors_path}" | tail -n1 | cut -d':' -f1
}

blockchain_node_to_id() {
    local node="$1" ; shift
    local id line ip

    id=0
    while read line ; do
	ip="$(echo "${line}" | cut -d':' -f1)"
	if [ "${ip}" = "${node}" ] ; then
	    echo ${id}
	    return 0
	else
	    id=$(( id + 1 ))
	fi
    done < "${behaviors_path}"
}

renew_deploy_root() {
    if [ -e "${deploy_root}" ] ; then
	rm -rf "${deploy_root}"
    fi

    mkdir -p "${deploy_root}"
}

ensure_prepare_root() {
    if [ ! -d "${prepare_root}" ] ; then
	mkdir -p "${prepare_root}"
    fi
}


setup_paths() {
    local target="$1" ; shift
    local numnode="$1" ; shift
    local id config

    for id in $(seq 0 $(( numnode - 1 ))) ; do
	config="${target}/${id}/node.yaml"
	sed -ri "s!${target}!${deploy_root}!g" "${config}"
    done
}

setup_waypoint() {
    local target="$1" ; shift
    local log wp

    log="${target}/logs/0.log"

    perl -wnle '/"waypoint"\s*:\s*"(0:[0-9a-f]+)"/ and print "$1"' "${log}" \
        | head -n1 > "${target}/waypoint"
}

setup_enodes() {
    local target="$1" ; shift
    local numnode="$1" ; shift
    local nid conf port log peers enodes

    peers="${target}/peers"
    enodes="${target}/enodes"

    for nid in $(seq 0 $(( numnode - 1 ))) ; do
	conf="${target}/${nid}/node.yaml"
	port="$(grep -e '^validator_network:$' -e 'listen_address:' "${conf}" \
                | grep -A 1 '^validator_network:$' | tail -n1 \
                |  sed -r 's!.*/!!')"

	log="${target}/logs/${nid}.log"

	perl -wnle 'm!Start listening for incoming connections on (\S+/'"${port}"'/\S+)! and print "$1"' "${log}" \
	    | head -n1 >> "${enodes}"

	perl -wnle '/"peer_id"\s*:\s*"([0-9a-f]+)"/ and print "$1"' "${log}" \
	    | head -n1 >> "${peers}"
    done
}

setup_enodes_addresses() {
    local enode nodeoff nid line ip offset port

    nid=0
    for nodeoff in $(list_blockchain_nodes_with_offset) ; do
	ip="$(echo ${nodeoff} | cut -d':' -f1)"
	offset="$(echo ${nodeoff} | cut -d':' -f2)"
	port=$(( SERVER_PORT + offset ))
	line=$(( nid + 1 ))

	sed -ri -e "${line}s!/ip4/0.0.0.0/!/ip4/${ip}/!" \
	        -e "${line}s!/tcp/[[:digit:]]+/!/tcp/${port}/!" \
	    "${deploy_root}/enodes"

	nid=$(( nid + 1 ))
    done
}

setup_config_addresses() {
    local nid="$1" ; shift
    local offset="$1" ; shift
    local conf line section port pnid peer enode key tmp

    conf="${deploy_root}/${nid}/node.yaml"
    tmp="$(mktemp --suffix='.yaml' 'minion-diem.XXXXXX')"

    while IFS= read line ; do
	if [ "${line:0:1}" != ' ' ] ; then
	    section="${line}"
	fi

	if [ "${section}" = 'json_rpc:' ] ; then
	    if echo "${line}" | grep -q 'address:' ; then
		port=$(( CLIENT_PORT + offset ))
		echo "  address: \"0.0.0.0:${port}\""
		continue
	    fi
	fi

	if [ "${section}" = 'validator_network:' ] ; then
	    if echo "${line}" | grep -q 'discovery_method:' ; then
		echo '  discovery_method: none'
		continue
	    fi

	    if echo "${line}" | grep -q 'listen_address:' ; then
		port=$(( SERVER_PORT + offset ))
		echo "  listen_address: \"/ip4/0.0.0.0/tcp/${port}\""
		continue
	    fi

	    if echo "${line}" | grep -q 'seeds:' ; then
		echo '  seeds:'

		pnid=0
		while read peer ; do
		    if [ ${pnid} -eq ${nid} ] ; then
			pnid=$(( pnid + 1 ))
			continue
		    fi

		    enode="$(head -n$(( pnid + 1 )) "${deploy_root}/enodes" \
                           | tail -n1)"
		    key="$(echo "${enode}" | cut -d'/' -f7)"

		    echo "    ${peer}:"
		    echo "      addresses: [ \"${enode}\" ]"
		    echo "      keys: [ \"${key}\" ]"
		    echo '      role: Validator'

		    pnid=$(( pnid + 1 ))
		done < "${deploy_root}/peers"

		continue
	    fi
	fi

	echo "${line}"
    done < "${conf}" > "${tmp}"

    mv "${tmp}" "${conf}"
}

setup_addresses() {
    local thisnode nid nodeoff ip offset

    setup_enodes_addresses

    thisnode="$(id_to_blockchain_node ${MINION_SIMD_ID})"

    nid=0
    for nodeoff in $(list_blockchain_nodes_with_offset) ; do
	ip="$(echo ${nodeoff} | cut -d':' -f1)"
	offset="$(echo ${nodeoff} | cut -d':' -f2)"
	if [ "${ip}" = "${thisnode}" ] ; then
	    setup_config_addresses ${nid} ${offset}
	fi
	nid=$(( nid + 1 ))
    done
}


prepared_network_path() {
    local numnode=$(list_blockchain_nodes | wc -l)

    echo "${prepare_root}/network-${numnode}-${ACCOUNTS}"
}

generate_accounts_file() {
    local initlog="$1" ; shift
    local target="$1" ; shift
    local line

    grep '^User account index:' "${initlogs}" \
	| sed -r 's/.*private_key: "([0-9a-f]*)".*/- \1/' \
	> "${target}"
}

generate_network_with() {
    local target="$1" ; shift
    local numnode="$1" ; shift
    local numaccount="$1" ; shift
    local i initlogs

    mkdir "${target}"
    initlogs="$(mktemp --suffix='.log' --tmpdir "diem-swarm.XXXXXX")"

    (
    sleep 20  # otherwise, faucet fails to mint
 	printf "dev enable_custom_script\n"
	for i in $(seq 0 $(( numaccount - 1 ))) ; do
	    printf "account create\n"
	    printf "account mint %d 1000000 XUS\n" ${i}
	done
	printf "account list\n"
	printf "account write ${target}/wallet\n"
    ) | \
    nice diem-swarm --num-nodes ${numnode} --config-dir "${target}" \
               --diem-node "$(which 'diem-node')" \
	       --start-client --cli-path "$(which 'cli')" \
	       2>&1 | tee "${initlogs}"

    setup_paths "${target}" ${numnode}
    setup_waypoint "${target}"
    setup_enodes "${target}" ${numnode}

    generate_accounts_file "${initlogs}" "${target}/accounts.yaml"
    rm "${initlogs}"

    rm -rf "${target}/logs"
}

generate_network() {
    local target="$1" ; shift
    local numnode=$(list_blockchain_nodes | wc -l)
    local numaccount=${ACCOUNTS}

    generate_network_with "${target}" ${numnode} ${numaccount}
}

replicate_network() {
    local network_path="$1" ; shift
    local id

    for id in ${MINION_SIMD_IDS} ; do
	cp -R "${network_path}" "${MINION_SIMD_DIR}/${id}/replicate/"
    done
}

copy_node_info() {
    local network="$1" ; shift
    local target="$1" ; shift
    local id="$1" ; shift
    local path nid thisnode node id

    for path in 'waypoint' 'peers' 'enodes' 'wallet' ; do
	cp "${network}/${path}" "${target}/${path}"
    done

    thisnode="$(id_to_blockchain_node ${id})"

    nid=0
    for node in $(list_blockchain_nodes) ; do
	if [ "${node}" = "${thisnode}" ] ; then
	    cp -R "${network}/${nid}" "${target}/${nid}"
	fi
	nid=$(( nid + 1 ))
    done
}

dispatch_network() {
    local network_path="$1" ; shift
    local id target

    for id in ${MINION_SIMD_IDS} ; do
	target="${MINION_SIMD_DIR}/${id}/dispatch"
	mkdir "${target}"
	copy_node_info "${network_path}" "${target}" ${id}
    done
}

dispatch_topology() {
    local id

    for id in ${MINION_SIMD_IDS} ; do
	if [ ${id} -eq 0 ] ; then
	    continue
	fi
	cp "${behaviors_path}" "${MINION_SIMD_DIR}/${id}"
    done
}

install_network() {
    local recvbox="${MINION_SIMD_DIR}/${MINION_SIMD_ID}"
    local network_path path node

    network_path="$(prepared_network_path)"

    if [ -e "${recvbox}/replicate" ] ; then
	mv "${recvbox}/replicate" "${network_path}"
    fi

    if [ -e "${recvbox}/dispatch" ] ; then
	mv "${recvbox}/dispatch/"* "${deploy_root}"
	rmdir "${recvbox}/dispatch"
    else
	copy_node_info "${network_path}" "${deploy_root}" \
		       ${MINION_SIMD_ID}
    fi

    setup_addresses
}

install_diablo_files() {
    local network_path="$1" ; shift
    local sendbox="${MINION_SIMD_DIR}/${MINION_SIMD_ID}"
    local nodeoff ip offset port tmpbox

    tmpbox="$(mktemp -d --suffix='.d' 'minion-diem.XXXXXX')"

    cp "${network_path}/accounts.yaml" "${tmpbox}/accounts.yaml"

    (
	for nodeoff in $(list_blockchain_nodes_with_offset) ; do
	    ip="$(echo "${nodeoff}" | cut -d':' -f1)"
	    offset="$(echo "${nodeoff}" | cut -d':' -f2)"
	    port=$(( CLIENT_PORT + offset ))

	    echo "${ip}:${port}"
	done
    ) > "${tmpbox}/nodes.conf"

    rm -rf "${sendbox}"
    mv "${tmpbox}" "${sendbox}"
}


setup_environment

renew_deploy_root
ensure_prepare_root

if is_leader ; then
    prepared_path="$(prepared_network_path)"

    if [ ! -e "${prepared_path}" ] ; then
	generate_network "${prepared_path}"

	replicate_network "${prepared_path}"
	# dispatch_network "${prepared_path}"
    fi

    dispatch_topology
fi

minion-fence

install_network

if is_leader ; then
    install_diablo_files "${prepared_path}"
fi
