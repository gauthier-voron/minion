#!/bin/bash
#
#   install-geth-accounts-worker - install the tools necessary to generate
#                                  accounts with geth then generate some
#                                  accounts with an initial balance.
#

set -e

number="$1"

if [ "x${number}" = 'x' ] ; then
    number=2
fi

# Create an install dir if not already there.
#
if [ ! -e 'install' ] ; then
    mkdir 'install'
fi

# Remove already installed accounts if already there.
#
if [ -e 'install/geth-accounts' ] ; then
    rm -rf 'install/geth-accounts'
fi

# Create an accounts directory
#
if [ ! -e 'install/geth-accounts' ] ; then
    mkdir 'install/geth-accounts'
fi

golang_version='1.17.9'
golang_url="https://go.dev/dl/go${golang_version}.linux-$(dpkg --print-architecture).tar.gz"

if [ ! -e "install/go${golang_version}" ] ; then
	curl -L "${golang_url}" | tar --one-top-level="install/go${golang_version}" --strip-components=1 -xzf -
fi
export PATH="${PWD}/install/go${golang_version}/bin:${PATH}"

cd 'install/geth-accounts'
cat > 'main.go' <<'EOF'
package main

import (
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
)

func main() {
	num, err := strconv.Atoi(os.Args[1])
	if err != nil {
		log.Fatal(err)
	}

	for i := 0; i < num; i++ {
		privateKey, err := crypto.GenerateKey()
		if err != nil {
			log.Fatal(err)
		}

		private := hexutil.Encode(crypto.FromECDSA(privateKey))[2:]
		address := crypto.PubkeyToAddress(privateKey.PublicKey).Hex()[2:]
		fmt.Printf("%s:%s\n", address, private)
	}
}
EOF
chmod 755 'main.go'

export GOPATH="${PWD}/go"

go mod init "geth-accounts"

go get github.com/ethereum/go-ethereum

go mod tidy

go run main.go "${number}" > 'accounts.txt'

go clean --cache
